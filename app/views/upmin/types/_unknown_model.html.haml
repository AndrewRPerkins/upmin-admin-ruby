.upmin-model{class: node.color}
  -# Display the model title as "Model # ID"
  %h3
    = node.title

  -# For each model attribute, render the DataNode inside of a form.
  = form_for(unknown_model, as: node.name.underscore, url: upmin_model_path(node.path_hash), html: { method: :put }) do |f|
    - node.attributes.each do |key, data_node|
      .form-group
        -# TODO(jon): Make the key already pretty if I can easily.
        = f.label(key.to_s.capitalize.gsub("_", " "))
        = upmin_render(data_node, form_builder: f)
    = f.submit("Save", class: "btn btn-primary")




  -# Render each child node
  %br
  %br
  %h3{style: "color: #333;"}
    Relationships
  %hr

  - node.children.each do |key, node|
    %h5
      = key.to_s.humanize
    - if node.is_a?(Upmin::Graph::CollectionNode)
      = upmin_render(node, options)
    - else
      %p
        = upmin_render(node, options)

  %br
  %br
  %h3{style: "color: #333;"}
    Actions
  %hr
  - unknown_model.class.upmin_methods.each do |method|
    %h4{style: "color: #333;"}
      = method.to_s.capitalize.humanize
    .well
      = form_tag(upmin_action_path(model_name: params[:model_name], id: params[:id], method: method)) do
        - unknown_model.method(method).parameters.each do |a_type, a_name|
          - next if a_type == :block # Skip blocks
          .form-group
            = label(method, a_name, a_name.to_s.capitalize.gsub("_", " "))
            = text_field(method, a_name, class: "form-control")
            - if a_type == :opt
              %small
                * Optional
        = submit_tag("Submit \"#{method.to_s.humanize}\"", class: "btn btn-primary")


  -# - if node.editable?


